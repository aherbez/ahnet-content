<html>
<head>
<title>
WebGL OBJ Viewer
</title>

<style type="text/css">
	body {
		background: #000;
		color: #00FF00;
		font-family: arial, sans;
	}
</style>



<body>

<input type="file" id="files" name="files[]" />
<output id="list"></output>

<script src="https://raw.github.com/mrdoob/three.js/master/build/three.js"></script>
<script type="text/javascript">

if (window.File && window.FileReader && window.FileList && window.Blob)
{
	;
}
else
{
	alert('Missing APIs');
}

var scene = new THREE.Scene();
var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);

var renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

var geometry = new THREE.CubeGeometry(1, 1, 1);
var geometryInt = new THREE.CubeGeometry(1, 1, 1);

var interiorMat = new THREE.MeshBasicMaterial({color: 0x004400});
var material = new THREE.MeshBasicMaterial({color: 0x00ff00, wireframe:true});
var cube = new THREE.Mesh(geometry, material);
var cubeInt = new THREE.Mesh(geometryInt, interiorMat);
scene.add(cubeInt);
scene.add(cube);

camera.position.z = 5;

function render()
{
	requestAnimationFrame(render);
	renderer.render(scene, camera);
	// cube.rotation.x += 0.05;
	cube.rotation.y += 0.05;
	cubeInt.rotation.y += 0.05;
}

render();
function handleFileSelect(evt)
{
	var files = evt.target.files; // FileList object
	
	var output = [];
	for (var i=0, f; f = files[i]; i++)
	{
		output.push('<li><strong>', escape(f.name), '</strong> (', f.type || 'n/a', ') - ',
				f.size, ' bytes, last modified: ',
				f.lastModifiedDate ? f.lastModifiedDate.toLocaleDateString() : 'n/a', 
				'</li>');
	
		var reader = new FileReader();
		
		reader.onload = (function(theFile) {
			return function(e) {
				var span = document.createElement('span');
				/*span.innerHTML = ['<img src="', e.target.result,
						'" title="', escape(theFile.name), '"/>'].join('');
				*/
				processFileData(e.target.result);
				// span.innertHTML = escape(e.target.result);
				// document.getElementById('list').insertBefore(span,null);
			}
		})(f);
		
		reader.readAsText(f);
	}
	document.getElementById('list').innerHTML = '<ul>' + output.join('') + '</ul>';
}

function processFileData(data)
{
	// alert(data);
	var lines = data.split("\n");	// TODO: make handle carriage returns
	
	var newgeoInt = new THREE.Geometry();
	var newgeo = new THREE.Geometry();
	var parts;
	var x, y, z, w;
	
	var minY = 10000;
	var maxY = -10000;
	
	for (var i=0; i < lines.length; i++)
	{
		if (lines[i].trim() != '')
		{
			lines[i] = lines[i].replace(/\s{2,}/g,' ');
			; // alert(lines[i]);
			parts = lines[i].split(' ');
			switch (parts[0])
			{
				case 'v':
				{	
					x = parseFloat(parts[1]);
					y = parseFloat(parts[2]);
					z = parseFloat(parts[3]);
					// alert(x + " " + y + " " + z);
					
					if (y < minY) minY = y;
					if (y > maxY) maxY = y;
					
					newgeoInt.vertices.push( new THREE.Vector3(x, y, z));
					newgeo.vertices.push( new THREE.Vector3(x, y, z));
				}
				break;
				
				case 'f':
				{
					x = parseInt(parts[1]-1);
					y = parseInt(parts[2]-1);
					z = parseInt(parts[3]-1);
					w = parts.length > 4 ? parseInt(parts[4]) -1 : 0;
					// alert(x + " " + y + " " + z);
					if (parts.length < 5)
					{
						newgeo.faces.push( new THREE.Face3(x, y, z));
						newgeoInt.faces.push( new THREE.Face3(x, y, z));
					}
					else
					{
						newgeo.faces.push( new THREE.Face4(x, y, z, w));					
						newgeoInt.faces.push( new THREE.Face3(x, y, z));
					}
				}
				break;
			}
		
		}
	}
	
	
	scene.remove(cube);
	scene.remove(cubeInt);
	geometry = null;
	// geometry = new THREE.CubeGeometry(2, 1, 1);
	cube = new THREE.Mesh(newgeo, material);
	cubeInt = new THREE.Mesh(newgeoInt, interiorMat);
	scene.add(cubeInt);
	scene.add(cube);
	
	camera.position.z = Math.abs(maxY - minY) * 2;
	
	// render();
}

document.getElementById('files').addEventListener('change',handleFileSelect, false);





</script>


</body>



</html>