<html>
<head>
<title>Minigame: Hacking Mechanic</title>
<style type="text/css">body
{
	font-family: arial, sans;
}
div#output
{
	width: 100%;
	height: 20px;
	border: 1px solid #000;	display: none;
}
canvas#stage{
	border: 1px solid #000;
}

div#ins
{
	position: relative;
	left: 320px;
	top: -150px;
}
</style>
<script type="text/javascript">var fps = 1000/12;var ctx;var board = new Array();var solution = new Array();var row = 0;
var col = 0;
var ROWS = 1;
var COLS = 2;
var moving = COLS;
var blank;var filled;var on;var arrow_l;var arrow_d;var arrow_lg;var arrow_dg;var back;
var ldoor;var rdoor;var won;var game_over = false;var door_pos = -150;
function output(text){
	document.getElementById('output').innerHTML = text;
}
function SetupBoard()
{
	board[0] = new Array(false,false,false,false,false,false,false,true,true,false);
	board[1] = new Array(false,true,false,true,false,false,false,false,false,false);
	board[2] = new Array(true,true,true,true,false,false,false,false,false,false);
	board[3] = new Array(false,false,true,true,false,false,false,false,false,true);
	board[4] = new Array(false,false,true,true,true,false,false,false,false,true);
	board[5] = new Array(false,false,true,true,true,true,true,true,true,true);
	board[6] = new Array(false,false,true,true,true,true,true,true,true,true);
	board[7] = new Array(false,false,true,true,true,true,true,true,true,false);
	board[8] = new Array(false,false,false,true,true,true,true,true,false,false);
	board[9] = new Array(false,false,false,false,true,true,true,false,false,false);
	solution[0] = new Array(false,false,true,true,false,false,false,false,false,false);
	solution[1] = new Array(false,true,false,true,false,false,false,false,false,false);
	solution[2] = new Array(true,true,true,true,false,false,false,false,false,false);
	solution[3] = new Array(false,false,true,true,false,false,false,false,false,true);
	solution[4] = new Array(false,false,true,true,true,false,false,false,false,true);
	solution[5] = new Array(false,false,true,true,true,true,true,true,true,true);
	solution[6] = new Array(false,false,true,true,true,true,true,true,true,true);
	solution[7] = new Array(false,false,true,true,true,true,true,true,true,false);
	solution[8] = new Array(false,false,false,true,true,true,true,true,false,false);
	solution[9] = new Array(false,false,false,false,true,true,true,false,false,false);
}

function RandomizeBoard()
{
	var num = Math.floor(Math.random(10) * 100) + 50;
	output(num);
	num = 0;
	for (i=0;i<num;i++)
	{
		row = Math.floor(Math.random() * 10);
		if (Math.random() > 0.5)
		{
			MoveGrid(ROWS,1);
		}
		else
		{
			MoveGrid(ROWS,-1);
		}
	}
	row = 0
}
function init()
{
	blank = new Image();
	blank.src = 'blank.png';
	filled = new Image();
	filled.src = 'filled.png';
	on = new Image();
	on.src = 'on.png';

	document.onkeyup = keyUp;
	document.onkeydown = keyDown;
	arrow_l = new Image(); arrow_l.src = 'arrow_left.png';
	arrow_lg = new Image(); arrow_lg.src = 'arrow_left_g.png';
	arrow_d = new Image(); arrow_d.src = 'arrow_down.png';
	arrow_dg = new Image(); arrow_dg.src = 'arrow_down_g.png';
	back = new Image(); back.src = 'background.png';
	ldoor = new Image(); ldoor.src = 'left_door.png';
	rdoor = new Image(); rdoor.src = 'right_door.png';
	won = new Image(); won.src = 'won.png';
	canvas = document.getElementById('stage');
	ctx = canvas.getContext('2d')

	SetupBoard();
	RandomizeBoard();
	// output('hello');
	setTimeout(UpdateGame,fps);
}
function UpdateGame()
{
	// logic 
	game_over = checkBoard();
	Render();
	setTimeout(UpdateGame,fps);
}
function keyUp(e)
{
	var theKey;
	if (window.event)
	{
		theKey = window.event.keyCode;
	}
	else if (e)
	{
		theKey = e.which;
	}
} 

function MoveGrid(move,dir)
{
	var temp;
	var ti;
	if (move == ROWS)
	{
		if (dir == 1)
		{
			var last = board[row][0];
			for (i=0;i<9;i++)
			{
				ti = i + dir;
				if (ti < 0) ti = 9;
				if (ti > 9) ti = 0;
				temp = board[row][i]
				board[row][i] = board[row][ti];
				board[row][ti] = temp;
			}
			board[row][9] = last;
		}
		else
		{
			var last = board[row][9];
			for (i=9;i>0;i--)
			{
				ti = i + dir;
				if (ti < 0) ti = 9;
				if (ti > 9) ti = 0;
				temp = board[row][i]
				board[row][i] = board[row][ti];
				board[row][ti] = temp;
			}
			board[row][0] = last;
		}
	}
	else
	{
		if (dir == -1)
		{
			var last = board[0][col];
			for (i=0;i<9;i++)
			{
				ti = i + dir;
				if (ti < 0) ti = 9;
				if (ti > 9) ti = 0;
				temp = board[i][col]
				board[i][col] = board[ti][col];
				board[ti][col] = temp;
			}
			board[9][col] = last;
		}
		else
		{
			var last = board[9][col];
			for (i=9;i>0;i--)
			{
				ti = i + dir;
				if (ti < 0) ti = 9;
				if (ti > 9) ti = 0;
				temp = board[i][col]
				board[i][col] = board[ti][col];
				board[ti][col] = temp;
			}
			board[0][col] = last;
		}	
	}
}
function keyDown(e)
{
	if (game_over) 
	{
		return;
	}
	var theKey;
	if (window.event)
	{
		theKey = window.event.keyCode;
	}
	else if (e)
	{
		theKey = e.which;
	}
	output(theKey + ' down');
	if (theKey == 37)
	{
		if (moving == COLS) 
		{
			col--;
			if (col < 0) col = 0;
		}
		else
		{
			MoveGrid(moving,1);
		}
	}
	else if (theKey == 39)
	{	
		if (moving == COLS)
		{
			col++;
			if (col > 9) col = 9;
		}
		else
		{
			MoveGrid(moving,-1);
		}
	}
	if (theKey == 38)
	{
		if (moving == ROWS)
		{
			row--;
			if (row < 0) row = 0;
		}
		else
		{
			MoveGrid(moving,-1);
		}
	}
	else if (theKey == 40)
	{	
		if (moving == ROWS)
		{
			row++;
			if (row > 9) row = 9;
		}
		else
		{
			MoveGrid(moving,1);
		}
	}	
	if (theKey == 32)
	{
		// switch 
		if (moving == ROWS)
		{
			moving = COLS;
		}
		else
		{
			moving = ROWS;
		}
	}}
function Render()
{
	ctx.drawImage(back,0,0);
	if (moving == ROWS)
	{
		ctx.drawImage(arrow_l,80,(row*20)+100);
		ctx.drawImage(arrow_dg,(col*20)+100,80);
	}
	else
	{
		ctx.drawImage(arrow_lg,80,(row*20)+100);
		ctx.drawImage(arrow_d,(col*20)+100,80);	
	}	
	for (i=0;i<10;i++)
	{
		for (j=0;j<10;j++)
		{
			if (board[i][j])
			{
				if (solution[i][j])
				{
					ctx.drawImage(on,(j*20)+100,(i*20)+100);
				}
				else
				{
					ctx.drawImage(filled,(j*20)+100,(i*20)+100);
				}
			}
			else
			{
				ctx.drawImage(blank,(j*20)+100,(i*20)+100);
			}
		}
	}
	if (game_over) 
	{
		// output('doors');
		ctx.drawImage(ldoor,door_pos,0);
		ctx.drawImage(rdoor,150 - door_pos,0);
		if (door_pos < 0)
		{
			door_pos += 10;
			if (door_pos > 0)
			{
				door_pos = 0;
			}
		}
		else
		{
			ctx.drawImage(won,150-110,150-50);
		}
	}
}
function checkBoard()
{
	for (i=0;i<10;i++)
	{
		for (j=0;j<10;j++)
		{
			if (board[i][j] != solution[i][j])
			{
				return false;
			}
		}
	}
	return true;
}
</script>
</head>
<body onload="init()" >
<div id="output" >&nbsp;</div><h1>Hacking Mechanic</h1>
<center>
<table>
<tr>
<td>
<canvas id="stage" width="300" height="300" />
</td>
<td width="350px">
Move the filled blocks to reveal an image and unlock the terminal. Green squares are active, grey squares are inert. When all of the squares have been activated, the terminal will unlock. <br /><br /><br />
Space: switch between moving rows and moving columns<br /><br />
Arrow Keys: move between rows/columns, or rotate the current one
</td>
</tr>
</table>
</center>
</body></html>